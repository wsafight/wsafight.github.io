<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[css复习——层叠性]]></title>
      <url>http://wsafight.github.io/2016/11/06/css%E5%A4%8D%E4%B9%A0-%E5%B1%82%E5%8F%A0%E6%80%A7/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[css复习——选择器]]></title>
      <url>http://wsafight.github.io/2016/11/06/css%E5%A4%8D%E4%B9%A0-%E9%80%89%E6%8B%A9%E5%99%A8/</url>
      <content type="html"><![CDATA[<h2 id="CSS是什么语言"><a href="#CSS是什么语言" class="headerlink" title="CSS是什么语言"></a>CSS是什么语言</h2><p>CSS是cascading style sheet层叠样式表的缩写。<br>业界的标准就是网页3层分离，即html描述语义，css描述样式，js描述动态效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">p&#123;</div><div class="line">    color:red;</div><div class="line">    font-size:30px;</div><div class="line">    text-decoration:underline;</div><div class="line">    text-style:italic;</div><div class="line">    text-align:center;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看出语法是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">选择器&#123;</div><div class="line">    k:v;</div><div class="line">    k:v;</div><div class="line">    k:v;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过键值对来对p标签进行样式修改<br>所以：css是描述文档样式的语言</p>
<h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><p>css不算编程，没有什么思想上的负担，只要把属性记准确，就可以了。<br>css只有两个知识部分，1选择器，2属性和样式，但今天只复习css选择器</p>
<h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h2><h3 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h3><p>标签选择器也就是标签的名字。<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot;&gt;</div><div class="line">p&#123;</div><div class="line">    font:32px/200% red;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>特性:<br>1)所有的标签，都可以是选择器，ul，li，input等等。<br>2)即使标签隐藏的很深很深，它也能够被选中。<br>3)标签选择器会选择页面上所有的这种类型的标签，基本上是描述共性而并非个性。</p>
<h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><p>表示选择页面上的某一个标签带id的<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#header&#123;</div><div class="line">    color:black;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>特性：<br>1)任何标签都可以加id，id以字母开头，可以有数字和下划线。<br>2)id也是区分大小写的，例如mm和Mm是不同的id。<br>3)同一个页面id是不可以重复的。</p>
<h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>表示选择页面上的大量标签带相同class的<br>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">.test&#123;</div><div class="line">   color: red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>特性：<br>1)任何标签都可以携带class属性，class以字母开头，可以有数字和下划线。<br>2)class属性可以重复,页面上可能有很多标签带有相同的类<br>3)同一个标签，可能属于多个类，而用空格隔开。<br>css类选择器是重中之重<br>用法:<br>1）不要用一个类名，把某个标签全部样式写完，这个标签要多携带几个类。<br>2）每个类尽可能小，有公共的概念，从而使得更多标签使用。</p>
<p>一个标签，可以同时被多种选择器选择，从而影响样式，这就是css的cascading层叠式的第一层含义。</p>
<h3 id="CSS高级选择器"><a href="#CSS高级选择器" class="headerlink" title="CSS高级选择器"></a>CSS高级选择器</h3><h4 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h4><p>空格表示后代<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot; &gt;</div><div class="line">div p&#123;</div><div class="line">    color:red;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>意义是：选择div标签下的所有p标签<br>后代选择器，就是一种平衡：共性、特性的平衡。当要把某一个部分的所有的什么，进行样式改变，就要想到后代选择器。</p>
<h4 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h4><p>相比后代没有空格<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot; &gt;</div><div class="line">div.c&#123;</div><div class="line">    color:red;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>意义是：选择同时是div标签且含有class为c的标签。<br>交集选择器，我们一般都是以标签名开头，比如div.haha  比如p.special。<br>用的不多。</p>
<h4 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h4><p>用逗号隔开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;style type=&quot;text/css&quot; &gt;</div><div class="line">div,.c&#123;</div><div class="line">    color:red;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure></p>
<p>意义是：选择是div标签或者含有class为c的标签。</p>
<h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符*"></a>通配符*</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*&#123;</div><div class="line">    color:red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效率不高，如果页面上标签越多，该标签效率越低，根本不会出现</p>
<h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><p>用大于号隔开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div&gt;p&#123;</div><div class="line">    color:red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>兼容性:IE6不兼容<br>意义：只能够选择div第一代后代p</p>
<h4 id="序选择器"><a href="#序选择器" class="headerlink" title="序选择器"></a>序选择器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div p:frist-child&#123;</div><div class="line">    color:red;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>兼容性:IE6,7不兼容<br>意义：选择div第一个子代p</p>
<h4 id="下一个兄弟选择器"><a href="#下一个兄弟选择器" class="headerlink" title="下一个兄弟选择器"></a>下一个兄弟选择器</h4><p>用加号隔开<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">div+p&#123;</div><div class="line">    color:red;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>兼容性:IE6不兼容<br>意义：选择紧紧挨着div的p标签</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[html复习——语义]]></title>
      <url>http://wsafight.github.io/2016/11/04/html%E5%A4%8D%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>你以为结束了？不，那只是开始</p>
<h2 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h2><p>毕业项目终于在今天宣告结束，从今天开始，在也不用去机房周而复始的写代码。<br>同时也开始复习前端知识了</p>
<h2 id="HTML是什么语言"><a href="#HTML是什么语言" class="headerlink" title="HTML是什么语言"></a>HTML是什么语言</h2><p>HTML的全称是HyperText Markup Language，即是超文本标记语言，而不是“How to make love”<br>业界的标准就是网页3层分离，即html描述语义，css描述样式，js描述动态效果<br>html除了能给页面加语义就没有别的用处了，例如i，em都是废弃的了<br>例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;新的开始&lt;/h1&gt;</div></pre></td></tr></table></figure></p>
<p>在页面的效果会变大，加粗，加黑，但是html并不是这样用的，html只可以给标签加语义<br>上述代码的本意是给“新的开始”这句话增加主标题的语义而已<br>所以:HTML是描述文档语句的语言 </p>
<h2 id="HTML语法"><a href="#HTML语法" class="headerlink" title="HTML语法"></a>HTML语法</h2><p>html纯骨架<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>html根据标签对来给予文本语义，html是最外层的标签。<br>浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容：<br>其中head是描述网页的配置，body描述网页的内容</p>
<h3 id="HTML网页的文档声明头"><a href="#HTML网页的文档声明头" class="headerlink" title="HTML网页的文档声明头"></a>HTML网页的文档声明头</h3><p>任何一个标准的html页面，第一行一定是:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE...</div></pre></td></tr></table></figure></p>
<p>这句话告诉浏览器使用哪一种html或xhml规范<br>但html5时候只需要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div></pre></td></tr></table></figure></p>
<p>因为html5不基于sgml，非常大的简化了网页的文档声明头，其他的我不想写了</p>
<h3 id="HTML网页的配置-head"><a href="#HTML网页的配置-head" class="headerlink" title="HTML网页的配置-head"></a>HTML网页的配置-head</h3><h4 id="meta设置元信息"><a href="#meta设置元信息" class="headerlink" title="meta设置元信息"></a>meta设置元信息</h4><p>字符集用meta标签定义，meta表示“元”。“元”配置，就是表示基本的配置项目。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=UTF-8&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>UTF-8里面存储一个汉字3个字节。而gb2312中存储一个汉字2个字节。但是还是要根据情况来决定</p>
<p>元信息分为两种<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;&quot; content=&quot;&quot; /&gt;</div><div class="line">&lt;meta http-equiv=&quot;&quot; content=&quot;&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>http-equiv<br>http-equiv相当于http的文件头作用，它可以向浏览器传回一些有用的信息，以帮助浏览器正确地显示网页内容。<br>name<br>name属性主要用于描述网页，与之对应的属性值为content，content中的内容主要是便于搜索引擎机器人查找信息和分类信息用的。</p>
<p>公司的话基本上常用的X-UA-Compatible、keywords、description。<br>下面介绍着三种，如果还有其他需要，请参考<a href="http://www.cnblogs.com/lovesong/p/5745893.html" target="_blank" rel="external">该网页</a><br>X-UA-Compatible IE8的专用标记，用来指定IE8浏览器去模拟某个特定版本的IE浏览器的渲染方式，以此来解决部分兼容问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>告诉浏览器IE8/9及以后的版本都会以最高版本IE来渲染页面。</p>
<p>Description 设置页面描述：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;Description&quot; content=&quot;网易是中国...&quot;&gt;</div></pre></td></tr></table></figure></p>
<p>只要设置的Description页面面熟，那么百度搜索结果，就能够显示这些语句，这个技术叫做SEO，search engine optimization，搜索引擎优化。</p>
<p>Keywords 设置关键词：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;Keywords&quot; content=&quot;网易,邮箱,游戏,新闻,体育,娱乐,亚运,论坛,短信&quot; /&gt;</div></pre></td></tr></table></figure></p>
<p>这些关键词，就是告诉搜索引擎，这个网页是干嘛的，能够提高搜索命中率。</p>
<h4 id="title设置标题"><a href="#title设置标题" class="headerlink" title="title设置标题"></a>title设置标题</h4><p>title也是有助于SEO搜索引擎优化的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;title&gt;wsafight博客&lt;/title&gt;</div></pre></td></tr></table></figure></p>
<h3 id="HTML语法特性"><a href="#HTML语法特性" class="headerlink" title="HTML语法特性"></a>HTML语法特性</h3><h4 id="空格和换行对html没用"><a href="#空格和换行对html没用" class="headerlink" title="空格和换行对html没用"></a>空格和换行对html没用</h4><p>比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;</div><div class="line">wings痛失TI6亚军，获得800万美金</div><div class="line">&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>和<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;wings痛失TI6亚军，获得800万美金&lt;/p&gt;</div></pre></td></tr></table></figure></p>
<p>在页面效果相同<br>也就是说，HTML不像python是依靠缩进来表示嵌套的，就是看标签的包裹关系。<br>百度为了追求极致的显示速度，所以没有空白和缩进，减少空白就是减少字符数<br>具体可以看百度的<a href="view-source:https://www.baidu.com/" target="_blank" rel="external">网页源代码</a></p>
<h4 id="空白折叠现象"><a href="#空白折叠现象" class="headerlink" title="空白折叠现象"></a>空白折叠现象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;wsafight        加油&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>在页面上展示两者之间只会有1个空格，叫做空白折叠先写</p>
<h4 id="标签要封闭"><a href="#标签要封闭" class="headerlink" title="标签要封闭"></a>标签要封闭</h4><p>虽然h5要求不高，但是对于自己要求一定要准确</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mvc思想]]></title>
      <url>http://wsafight.github.io/2016/10/10/mvc%E6%80%9D%E6%83%B3/</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[缓存的学习]]></title>
      <url>http://wsafight.github.io/2016/10/09/%E7%BC%93%E5%AD%98%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>生活不仅只是敲代码，还有……调bug。</p>
<h3 id="大神使用的缓存"><a href="#大神使用的缓存" class="headerlink" title="大神使用的缓存"></a>大神使用的缓存</h3><h3 id="实例中的缓存"><a href="#实例中的缓存" class="headerlink" title="实例中的缓存"></a>实例中的缓存</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[个人主页编写的难点]]></title>
      <url>http://wsafight.github.io/2016/09/30/%E4%B8%AA%E4%BA%BA%E4%B8%BB%E9%A1%B5%E7%BC%96%E5%86%99/</url>
      <content type="html"><![CDATA[<h2 id="懒癌犯了-个人主页暂时不写了"><a href="#懒癌犯了-个人主页暂时不写了" class="headerlink" title="懒癌犯了,个人主页暂时不写了"></a>懒癌犯了,个人主页暂时不写了</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[markdown学习以及hexo的解析]]></title>
      <url>http://wsafight.github.io/2016/09/27/markdown%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>更加具有表达性的文档格式——Markdown</p>
<h2 id="Markdown学习"><a href="#Markdown学习" class="headerlink" title="Markdown学习"></a>Markdown学习</h2><h3 id="什么是markdown"><a href="#什么是markdown" class="headerlink" title="什么是markdown"></a>什么是markdown</h3><p>Markdown是john Gruber和Aaron Swartz在2004年开发的一种格式<br>Markdown 是一个 web端 上使用的文本到HTML的转换工具<br>可以通过简单、易读易写的文本格式生成结构化的HTML文档  </p>
<h3 id="为什么要学习Markdown"><a href="#为什么要学习Markdown" class="headerlink" title="为什么要学习Markdown"></a>为什么要学习Markdown</h3><p>个人感觉,个人在学习一项新技术的时候,一定要想一下这项技术对自己带来的提升以及付出的代价<br>在Github中需要readme.md来解释自己的项目,使用的就是md,github有多么强大自然不必说,学习当然也是必然的了<br>编写个人博客,我的博客里面的文章就是Markdown写出来的,而且Github支持你在上面写博客<br>写开源书籍，在网上展示怎么也比你写在网页里面写快啊！例如:阮一峰大神的<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门</a></p>
<h3 id="markdown的写法"><a href="#markdown的写法" class="headerlink" title="markdown的写法"></a>markdown的写法</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。<br>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">主标题H1</div><div class="line">=================</div><div class="line">次标题H2</div><div class="line">-----------------</div></pre></td></tr></table></figure></p>
<p>效果如下所示</p>
<p></p><h1>主标题H1</h1><p></p>
<h2>次标题H2</h2>

<p>类 atx是利用了 # 字符 在行首插入了1~6个 # 来对应h1~h6<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 这是h1 #</div><div class="line">## 这是h2</div><div class="line">### 这是h3</div><div class="line">... ...</div></pre></td></tr></table></figure></p>
<p>这一段Markdown文本将生成如下的HTML:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;h1&gt;这是h1&lt;/h1&gt;</div><div class="line">&lt;h2&gt;这是h2&lt;/h2&gt;</div><div class="line">&lt;h3&gt;这是h3&lt;/h3&gt;</div></pre></td></tr></table></figure></p>
<p>效果如下所示</p>
<p></p><h1>这是h1</h1><p></p>
<p></p><h2>这是h2</h2><p></p>
<h3>这是h3</h3>

<p>结尾标记中的#是原始版本的要求，现在可以不添加了，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）</p>
<h4 id="换行以及段落"><a href="#换行以及段落" class="headerlink" title="换行以及段落"></a>换行以及段落</h4><h2 id="hexo的解析"><a href="#hexo的解析" class="headerlink" title="hexo的解析"></a>hexo的解析</h2>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[js框架原理]]></title>
      <url>http://wsafight.github.io/2016/09/20/js%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="js框架原理解析"><a href="#js框架原理解析" class="headerlink" title="js框架原理解析"></a>js框架原理解析</h2><h3 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h3><p>jQuery是javascript很强大的一个库，通过学习jQuery可以让自己的js代码写的更加具有灵性。<br>当然,jQuery也是大牛们开发出来的高效执行的js代码，其原理并没有那么难懂。</p>
<p>更多信息: <a href="http://jquery.com/" target="_blank" rel="external">jQuery官网</a></p>
<h3 id="框架的好处"><a href="#框架的好处" class="headerlink" title="框架的好处"></a>框架的好处</h3><p>对于前端工程师而言,浏览器兼容性问题无疑是一个令人头痛的问题,IE678又有奇怪的特性<br>jQuery1.x.x兼容于IE678,而大于1.x.x的版本却不兼容IE678,也表示了将来发展趋势<br>框架的好处就是别人帮你造好了轮子(而且是非常好的轮子)，你减少了这一过程，帮助不可谓不大。</p>
<h3 id="不用js框架手写的js代码"><a href="#不用js框架手写的js代码" class="headerlink" title="不用js框架手写的js代码"></a>不用js框架手写的js代码</h3><p>下面的js代码是获取浏览器可视区的大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">//获取可视区域的大小  兼容性问题</div><div class="line">$ function client() &#123;</div><div class="line">    if (window.innerWidth) &#123;//ie9+最新浏览器</div><div class="line">        return &#123;</div><div class="line">            width: window.innerWidth,</div><div class="line">            height: window.innerHeight</div><div class="line">        &#125;</div><div class="line">    &#125; else if (document.compatMode == &quot;CSS1Compat&quot;) &#123;//标准模式</div><div class="line">        return &#123;</div><div class="line">            width: document.documentElement.clientWidth,</div><div class="line">            height: document.documentElement.clientHeight</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return &#123;//怪异模式</div><div class="line">        width: document.body.clientWidth,</div><div class="line">        height: document.body.clientHeight</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>由此可见,js去写兼容性是多么恶心的一件事情了,那么使用jQuery库呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(window).height(); //浏览器时下窗口可视区域高度</div><div class="line">$(document).height(); //浏览器时下窗口文档的高度</div><div class="line">$(document.body).height();//浏览器时下窗口文档body的高度</div><div class="line">$(document.body).outerHeight(true);//浏览器时下窗口文档body的总高度 包括border padding margin</div><div class="line">$(window).width(); //浏览器时下窗口可视区域宽度</div><div class="line">$(document).width();//浏览器时下窗口文档对于象宽度</div><div class="line">$(document.body).width();//浏览器时下窗口文档body的高度</div><div class="line">$(document.body).outerWidth(true);//浏览器时下窗口文档body的总宽度 包括border padding margin</div><div class="line">$(document).scrollTop(); //获取滚动条到顶部的垂直高度</div><div class="line">$(document).scrollLeft(); //获取滚动条到左边的垂直宽度</div></pre></td></tr></table></figure></p>
<p>简介而美丽,并且无需考虑IE678的兼容性问题,帮我们做了很多东西</p>
<h3 id="一个库的设计"><a href="#一个库的设计" class="headerlink" title="一个库的设计"></a>一个库的设计</h3><h4 id="创建框架的方式"><a href="#创建框架的方式" class="headerlink" title="创建框架的方式"></a>创建框架的方式</h4><p>基本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">// 创建对象</div><div class="line"> var gg=function()&#123;&#125;;</div><div class="line"> gg.prototype=function()&#123;</div><div class="line">         extend:function(tar,source) &#123;</div><div class="line">        //遍历对象</div><div class="line">        for(var i in source)&#123;</div><div class="line">            tar[i] = source[i];</div><div class="line">        &#125;</div><div class="line">        return tar;</div><div class="line">    &#125;</div><div class="line"> &#125;</div><div class="line"> // 在框架中实例化,在外无需实例  </div><div class="line"> $=new gg();</div></pre></td></tr></table></figure></p>
<p>模块化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 基本操作</div><div class="line">$.extend($,&#123;</div><div class="line">     $id:function(str)&#123;</div><div class="line">        return document.getElementById(str);</div><div class="line">    &#125;,</div><div class="line">    … …</div><div class="line">&#125;);</div><div class="line">// 其他操作</div><div class="line">$.extend($,&#123;</div><div class="line">    … …</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h4 id="方式的进阶"><a href="#方式的进阶" class="headerlink" title="方式的进阶"></a>方式的进阶</h4><p>如何用$().xxx().xxx()方式呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 简单的框架</span></div><div class="line"><span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id);</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 给元素对象扩展方法</span></div><div class="line">HTMLElement.prototype.hide = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.style.display = <span class="string">"none"</span>;</div><div class="line">&#125;;</div><div class="line">HTMLElement.prototype.show = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">this</span>.style.display = <span class="string">"block"</span>;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// onclick事件元素对象上的方法而已</span></div><div class="line">$(<span class="string">"btn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">"ima"</span>).hide();</div><div class="line">    $(<span class="string">"imb"</span>).show();</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>缺点:改变了原生的javascript,不是很好,再次改进</p>
<h4 id="方式的进阶的改进"><a href="#方式的进阶的改进" class="headerlink" title="方式的进阶的改进"></a>方式的进阶的改进</h4><p>双对象模式可以完成<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个名为gg的对象</span></div><div class="line"><span class="keyword">var</span> gg =<span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.elements = [];</div><div class="line">    context = context || <span class="built_in">document</span>;</div><div class="line">    <span class="keyword">this</span>.elements = context.querySelectorAll(selector);</div><div class="line">&#125;</div><div class="line">gg.prototype=&#123;</div><div class="line">        <span class="comment">//显示</span></div><div class="line">        show:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.elements.length;i++)&#123;</div><div class="line">                <span class="keyword">this</span>.elements[i].style.display = <span class="string">'block'</span></div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 返回该对象,链式编程</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">//隐藏</span></div><div class="line">        hide:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.length;i++)&#123;</div><div class="line">                <span class="keyword">this</span>[i].style.display = <span class="string">'none'</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// 最后的一点,双对象</span></div><div class="line"><span class="keyword">var</span> $ = <span class="function"><span class="keyword">function</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> gg(id);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>书写该代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(&apos;btn&apos;).show().hide();//实现链式编程</div></pre></td></tr></table></figure></p>
<p>如果想深入研究,看看jQuery源码去学习javascript是很不错的</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://wsafight.github.io/2016/09/18/hello-world/</url>
      <content type="html"><![CDATA[<p>人生若只如初见</p>
<h3 id="起"><a href="#起" class="headerlink" title="起"></a>起</h3><p>两年前第一次学编程的时候，第一门编程语言是c语言，那时候感觉一切都是那么的新奇。<br>虽然写的代码都运行在那个”黑框框”里面，但是依然觉得如此引人入胜，令人觉得惊奇。<br>感觉那个时候学的算法是最多的，我那个时候还靠C语言拿了几个奖，感觉还是挺不错的。<br>C语言是很博大精深的，但是因为自己的一些原因，没有深入研究下去，但是今后估计也要看心情(<del>~(&gt;_&lt;)</del>~)</p>
<h3 id="面向过程与面向对象"><a href="#面向过程与面向对象" class="headerlink" title="面向过程与面向对象"></a>面向过程与面向对象</h3><p>c语言是面向过程的，java是面向对象的，在刚学java的时候不知道对自己说了多少遍哦。<br>但是其实说句实话，我现在也对面向对象运用的也是很浅，只是留在字面的封装，继承与多态。<br>java是可以让你写个东西出来的，在学习java的时候，倒是没被c语言虐的那么狠，只是少了指针。<br>就像有个老师说的那样，java没有你不会调的，只有你不知道的，c语言没有你不知道的，只有你不会调的。<br>学校里java学是ssh框架，这个东西很好，省下了很多的时间，但是我唯一对其有怨念的就是:<br>为什么要写那么多的xml来集成，当然了，我死在这上面很多次。<br>然后在写项目的时候又知道了Bootstrap前端框架，然后…就对java怨念更深了。</p>
<h3 id="javascript的是与非"><a href="#javascript的是与非" class="headerlink" title="javascript的是与非"></a>javascript的是与非</h3><p>前端不好，前端很简单，前端… …<br>慢慢的，我终于知道了为什么这样说，因为他们不知道前端已经发展成什么模样了。<br>在不久之前,我也是那么感觉的，可是学着学着，觉得现在前端也已经不是前端了。<br>开始的html+css+javascript，到后面的bootstrap，angular，ionic，gulp以及强大的node服务器。<br>我慢慢领略了另一种美，当然了，本人的美工实在是差的可以，所以我还是要往设计上学习… …<br>当然了，javascript也没有那么强大，个人感觉他是一个先天不足的语言:<br>基本语法：借鉴C语言和Java语言。<br>数据结构：借鉴Java语言，包括将值分成原始值和对象两大类。<br>函数的用法：借鉴Scheme语言和Awk语言，将函数当作第一等公民，并引入闭包。<br>原型继承模型：借鉴Self语言（Smalltalk的一种变种）。<br>正则表达式：借鉴Perl语言。<br>字符串和数组处理：借鉴Python语言。<br>我都不知道怎么样说了，大杂烩喽。<br>当然了，闭包，变量提升，原型链，全局污染都是javascript里的坑，我都是踩着坑过来的。<br>当然，我一直以为的node是在javascript上发展起来的这一观点也是错误的。<br>不是javascript发展出了node，而是node选择了javascript。<br>推荐两个学习js的网站:阮一峰大神的<a href="http://javascript.ruanyifeng.com/" target="_blank" rel="external">JavaScript 标准参考教程</a>和<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">ECMAScript 6入门</a></p>
<h3 id="需要提升的地方"><a href="#需要提升的地方" class="headerlink" title="需要提升的地方"></a>需要提升的地方</h3><p>美感，设计，html+css的书写，javascript深入,设计模式等都是我需要一步步提升的，在此之前，我也希望各位大神可以给我一个工作的机会。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>如果你交给某人一个程序，你将折磨他一整天，如果你教某人如何编写程序，你将折磨一辈子。<br>人生若只如初见，初见不如不相见。</p>
]]></content>
    </entry>
    
  
  
</search>
