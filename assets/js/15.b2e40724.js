(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{182:function(e,t,r){"use strict";r.r(t);var a=r(0),n=Object(a.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),r("ul",[r("li",[e._v("可以在代码某些需要js的时候去使用 loadjs 来动态加载 js 库。这样就不会出现开始时候加载大量js文件。")]),e._v(" "),r("li",[e._v("再大点的项目可能用一下 Nginx "),r("a",{attrs:{href:"http://tengine.taobao.org/document_cn/http_concat_cn.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("ngx_http_concat_module"),r("OutboundLink")],1),e._v(" 模块来合并多个文件在一个响应报文中。也就是再加载多个小型 js 文件时候合并为一个 js 文件。")]),e._v(" "),r("li",[e._v("BigPipe 技术也是可以对页面分块来进行优化的，但是因为与本文关系不大，方案也没有通用化和规范化，加上本人其实没有深入了解所不进行深入介绍，如果先了解可以参考 "),r("a",{attrs:{href:"http://taobaofed.org/blog/2015/12/17/seller-bigpipe/",target:"_blank",rel:"noopener noreferrer"}},[e._v("新版卖家中心 Bigpipe 实践（一）"),r("OutboundLink")],1),e._v(" 以及 "),r("a",{attrs:{href:"http://taobaofed.org/blog/2016/03/25/seller-bigpipe-coding/",target:"_blank",rel:"noopener noreferrer"}},[e._v("新版卖家中心 Bigpipe 实践（二）"),r("OutboundLink")],1),e._v("。")])]),e._v(" "),r("p",[e._v("当然那个时期的代码也没有像现在的前端的代码量和复杂度那么高。")]),e._v(" "),e._m(4),e._v(" "),r("p",[e._v("与其说 Webpack 是一个模块打包器，倒不如说 Webpack 是一份前端规范。")]),e._v(" "),e._m(5),e._v(" "),r("p",[e._v("对于我们代码中所需要的代码库没有大量使用，比如说某种组件库我们仅仅只使用了 2、3个组件的情况下。我们更多需要按需加载功能。"),r("br"),e._v("\n比方说在 "),r("a",{attrs:{href:"https://next.material-ui.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("MATERIAL-UI"),r("OutboundLink")],1),e._v(" 我们可以用")]),e._v(" "),e._m(6),r("p",[e._v("代替")]),e._v(" "),e._m(7),r("p",[e._v("这样就实现了按需加载，而不是动辄需要整个组件库。但是这样的代码中这样代码并不好书写。我们就需要一个帮助我们转换代码的库。这可以参考 "),r("a",{attrs:{href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Babel 插件手册"),r("OutboundLink")],1),e._v(" 以及 "),r("a",{attrs:{href:"https://github.com/airuikun/Weekly-FE-Interview/issues/9",target:"_blank",rel:"noopener noreferrer"}},[e._v("简单实现项目代码按需加载"),r("OutboundLink")],1),e._v(" 来实现我们的需求。")]),e._v(" "),e._m(8),e._v(" "),r("p",[e._v("如果我们的库被当前的项目大量使用了，按需加载其实就未必是最好的方法了，如果我们的服务器不是特别好的情况下我们可以使用 Webpack 的 externals 配置来优化项目的js。就简单的对 externals 配置简单说明一下。externals其实是在全局中的得到库文件。")]),e._v(" "),e._m(9),e._m(10),e._v(" "),e._m(11),e._m(12),e._v(" "),e._m(13),r("p",[e._v("因为 window 对象有自己引用自己，所以 window === window.window.window。所以代码为 window.window['material-ui']。可以参考 "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/window",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN Window.window"),r("OutboundLink")],1)]),e._v(" "),e._m(14),e._v(" "),e._m(15),e._v(" "),r("p",[e._v("在当前所需要 js 文件不需要大量使用同时需要的 js 文件是不需要开始时加载(如 React, React-Router 一类)的时候我们依然可以使用loadjs来加载(比如说 图标库一类，只在某一些页面使用)。")]),e._v(" "),e._m(16),e._v(" "),r("p",[e._v("对于在 HTTP2 中合并多个 小js文件未必好。因为在 HTTP2 中，HTTP 请求是廉价的，合并便不再显得有优势。")]),e._v(" "),e._m(17),e._v(" "),r("p",[e._v("当然了,BigPipe 方案不是针对单页面应用程序。而且对于前后端的技术要求较高，所以对于项目未必是最有效的方案。")]),e._v(" "),e._m(18),e._v(" "),r("p",[e._v("现如今也可以使用一些其他的方法。例如 Service Worker,Wasm 等一系列方案。不知道还有什么其他方法，也可以介绍给我。")]),e._v(" "),e._m(19),e._v(" "),r("p",[r("a",{attrs:{href:"http://taobaofed.org/blog/2015/12/17/seller-bigpipe/",target:"_blank",rel:"noopener noreferrer"}},[e._v("新版卖家中心 Bigpipe 实践（一）"),r("OutboundLink")],1),r("br"),e._v(" "),r("a",{attrs:{href:"http://taobaofed.org/blog/2016/03/25/seller-bigpipe-coding/",target:"_blank",rel:"noopener noreferrer"}},[e._v("新版卖家中心 Bigpipe 实践（二）"),r("OutboundLink")],1),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("Babel 插件手册"),r("OutboundLink")],1),r("br"),e._v(" "),r("a",{attrs:{href:"https://github.com/airuikun/Weekly-FE-Interview/issues/9",target:"_blank",rel:"noopener noreferrer"}},[e._v("简单实现项目代码按需加载"),r("OutboundLink")],1),r("br"),e._v(" "),r("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/window",target:"_blank",rel:"noopener noreferrer"}},[e._v("MDN Window.window"),r("OutboundLink")],1)]),e._v(" "),r("Valine")],1)},[function(){var e=this.$createElement,t=this._self._c||e;return t("h1",{attrs:{id:"谈谈前端工程化-js加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#谈谈前端工程化-js加载","aria-hidden":"true"}},[this._v("#")]),this._v(" 谈谈前端工程化 js加载")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"当年的-js-加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#当年的-js-加载","aria-hidden":"true"}},[this._v("#")]),this._v(" 当年的 js 加载")])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("在没有 前端工程化之前，基本上是我们是代码一把梭，把所需要的库和自己的代码堆砌在一起，然后自上往下的引用就可以了。"),t("br"),this._v("\n那个时代我们没有公用的cdn，也没有什么特别好的方法来优化加载js的速度。最多用以下几个方案。")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"可用的性能方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#可用的性能方案","aria-hidden":"true"}},[this._v("#")]),this._v(" 可用的性能方案")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"webpack-之后的js加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-之后的js加载","aria-hidden":"true"}},[this._v("#")]),this._v(" Webpack 之后的js加载")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"需要库没有被大量使用情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#需要库没有被大量使用情况","aria-hidden":"true"}},[this._v("#")]),this._v(" 需要库没有被大量使用情况")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("import TextField from '@material-ui/core/TextField';\nimport Popper from '@material-ui/core/Popper';\nimport Paper from '@material-ui/core/Paper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Chip from '@material-ui/core/Chip';\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("import {\n  TextField,\n  Popper,\n  Paper,\n  MenuItem,\n  Chip\n} from '@material-ui'\n\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"需要库大量被使用情况"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#需要库大量被使用情况","aria-hidden":"true"}},[this._v("#")]),this._v(" 需要库大量被使用情况")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('  // 页面中使用 cdn，这样的话，我们就会在 window 中得到 jQuery\n  // 也就是 global.JQuery 浏览器中 global === window\n  <script\n    src="https://code.jquery.com/jquery-3.1.0.js"\n    integrity="sha256-slogkvB1K3VOkzAI8QITxV3VzpOnkeNVsKvtkYLMjfk="\n    crossorigin="anonymous">\n  <\/script>\n\n  // 在项目中导入 jquery 使用\n  import $ from \'jquery\';\n\n  // 配置中 左边是 配置的 jquery 告诉 Webpack 不需要导入\n  // 配置中 右边是 配置的 JQuery 告诉 Webpack 记载 jquery 时候使用 global.JQuery\n  externals: {\n    jquery: \'jQuery\'\n  }\n')])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("但是使用 externals 曾遇到这样的情况。我在使用 material-ui 组件库时候发现该库在全局导出的代码是 material-ui。"),t("br"),this._v("\n也就是:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("  externals: {\n    '@material-ui/core': 'material-ui'\n  }\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("p",[this._v("此时会发生导入错误，错误原因为: window.material-ui。"),t("br"),this._v("\n本来我是想要引入material-ui，却 - 符号变为了减号。"),t("br"),this._v("\n本来想要利用用 ['material-ui'] 来替换，却发现行不通: windows.['material-ui']"),t("br"),this._v("\n解决方法:")])},function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("  externals: {\n    '@material-ui/core': \"window['material-ui']\"\n  }\n")])])])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"上文中的性能优化方案依然可用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#上文中的性能优化方案依然可用","aria-hidden":"true"}},[this._v("#")]),this._v(" 上文中的性能优化方案依然可用")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"loadjs-动态加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loadjs-动态加载","aria-hidden":"true"}},[this._v("#")]),this._v(" loadjs 动态加载")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"合并多个小型-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#合并多个小型-js","aria-hidden":"true"}},[this._v("#")]),this._v(" 合并多个小型 js")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h3",{attrs:{id:"bigpipe-方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bigpipe-方案","aria-hidden":"true"}},[this._v("#")]),this._v(" BigPipe 方案")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他","aria-hidden":"true"}},[this._v("#")]),this._v(" 其他")])},function(){var e=this.$createElement,t=this._self._c||e;return t("h2",{attrs:{id:"参考文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考文档","aria-hidden":"true"}},[this._v("#")]),this._v(" 参考文档")])}],!1,null,null,null);t.default=n.exports}}]);